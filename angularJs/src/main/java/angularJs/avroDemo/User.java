/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package angularJs.avroDemo;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase
		implements org.apache.avro.specific.SpecificRecord {
	private static final long serialVersionUID = -734171317750910283L;
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
			"{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"angularJs.avroDemo\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":[\"int\",\"null\"]},{\"name\":\"phone\",\"type\":[\"string\",\"null\"]}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	@Deprecated
	public java.lang.CharSequence name;
	@Deprecated
	public java.lang.Integer age;
	@Deprecated
	public java.lang.CharSequence phone;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public User() {
	}

	/**
	 * All-args constructor.
	 * 
	 * @param name
	 *            The new value for name
	 * @param age
	 *            The new value for age
	 * @param phone
	 *            The new value for phone
	 */
	public User(java.lang.CharSequence name, java.lang.Integer age, java.lang.CharSequence phone) {
		this.name = name;
		this.age = age;
		this.phone = phone;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(int field$) {
		switch (field$) {
		case 0:
			return name;
		case 1:
			return age;
		case 2:
			return phone;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(int field$, java.lang.Object value$) {
		switch (field$) {
		case 0:
			name = (java.lang.CharSequence) value$;
			break;
		case 1:
			age = (java.lang.Integer) value$;
			break;
		case 2:
			phone = (java.lang.CharSequence) value$;
			break;
		default:
			throw new org.apache.avro.AvroRuntimeException("Bad index");
		}
	}

	/**
	 * Gets the value of the 'name' field.
	 * 
	 * @return The value of the 'name' field.
	 */
	public java.lang.CharSequence getName() {
		return name;
	}

	/**
	 * Sets the value of the 'name' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setName(java.lang.CharSequence value) {
		this.name = value;
	}

	/**
	 * Gets the value of the 'age' field.
	 * 
	 * @return The value of the 'age' field.
	 */
	public java.lang.Integer getAge() {
		return age;
	}

	/**
	 * Sets the value of the 'age' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setAge(java.lang.Integer value) {
		this.age = value;
	}

	/**
	 * Gets the value of the 'phone' field.
	 * 
	 * @return The value of the 'phone' field.
	 */
	public java.lang.CharSequence getPhone() {
		return phone;
	}

	/**
	 * Sets the value of the 'phone' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setPhone(java.lang.CharSequence value) {
		this.phone = value;
	}

	/**
	 * Creates a new User RecordBuilder.
	 * 
	 * @return A new User RecordBuilder
	 */
	public static angularJs.avroDemo.User.Builder newBuilder() {
		return new angularJs.avroDemo.User.Builder();
	}

	/**
	 * Creates a new User RecordBuilder by copying an existing Builder.
	 * 
	 * @param other
	 *            The existing builder to copy.
	 * @return A new User RecordBuilder
	 */
	public static angularJs.avroDemo.User.Builder newBuilder(angularJs.avroDemo.User.Builder other) {
		return new angularJs.avroDemo.User.Builder(other);
	}

	/**
	 * Creates a new User RecordBuilder by copying an existing User instance.
	 * 
	 * @param other
	 *            The existing instance to copy.
	 * @return A new User RecordBuilder
	 */
	public static angularJs.avroDemo.User.Builder newBuilder(angularJs.avroDemo.User other) {
		return new angularJs.avroDemo.User.Builder(other);
	}

	/**
	 * RecordBuilder for User instances.
	 */
	public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
			implements org.apache.avro.data.RecordBuilder<User> {

		private java.lang.CharSequence name;
		private java.lang.Integer age;
		private java.lang.CharSequence phone;

		/** Creates a new Builder */
		private Builder() {
			super(SCHEMA$);
		}

		/**
		 * Creates a Builder by copying an existing Builder.
		 * 
		 * @param other
		 *            The existing Builder to copy.
		 */
		private Builder(angularJs.avroDemo.User.Builder other) {
			super(other);
			if (isValidValue(fields()[0], other.name)) {
				this.name = data().deepCopy(fields()[0].schema(), other.name);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.age)) {
				this.age = data().deepCopy(fields()[1].schema(), other.age);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.phone)) {
				this.phone = data().deepCopy(fields()[2].schema(), other.phone);
				fieldSetFlags()[2] = true;
			}
		}

		/**
		 * Creates a Builder by copying an existing User instance
		 * 
		 * @param other
		 *            The existing instance to copy.
		 */
		private Builder(angularJs.avroDemo.User other) {
			super(SCHEMA$);
			if (isValidValue(fields()[0], other.name)) {
				this.name = data().deepCopy(fields()[0].schema(), other.name);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(fields()[1], other.age)) {
				this.age = data().deepCopy(fields()[1].schema(), other.age);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(fields()[2], other.phone)) {
				this.phone = data().deepCopy(fields()[2].schema(), other.phone);
				fieldSetFlags()[2] = true;
			}
		}

		/**
		 * Gets the value of the 'name' field.
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getName() {
			return name;
		}

		/**
		 * Sets the value of the 'name' field.
		 * 
		 * @param value
		 *            The value of 'name'.
		 * @return This builder.
		 */
		public angularJs.avroDemo.User.Builder setName(java.lang.CharSequence value) {
			validate(fields()[0], value);
			this.name = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/**
		 * Checks whether the 'name' field has been set.
		 * 
		 * @return True if the 'name' field has been set, false otherwise.
		 */
		public boolean hasName() {
			return fieldSetFlags()[0];
		}

		/**
		 * Clears the value of the 'name' field.
		 * 
		 * @return This builder.
		 */
		public angularJs.avroDemo.User.Builder clearName() {
			name = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/**
		 * Gets the value of the 'age' field.
		 * 
		 * @return The value.
		 */
		public java.lang.Integer getAge() {
			return age;
		}

		/**
		 * Sets the value of the 'age' field.
		 * 
		 * @param value
		 *            The value of 'age'.
		 * @return This builder.
		 */
		public angularJs.avroDemo.User.Builder setAge(java.lang.Integer value) {
			validate(fields()[1], value);
			this.age = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/**
		 * Checks whether the 'age' field has been set.
		 * 
		 * @return True if the 'age' field has been set, false otherwise.
		 */
		public boolean hasAge() {
			return fieldSetFlags()[1];
		}

		/**
		 * Clears the value of the 'age' field.
		 * 
		 * @return This builder.
		 */
		public angularJs.avroDemo.User.Builder clearAge() {
			age = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		/**
		 * Gets the value of the 'phone' field.
		 * 
		 * @return The value.
		 */
		public java.lang.CharSequence getPhone() {
			return phone;
		}

		/**
		 * Sets the value of the 'phone' field.
		 * 
		 * @param value
		 *            The value of 'phone'.
		 * @return This builder.
		 */
		public angularJs.avroDemo.User.Builder setPhone(java.lang.CharSequence value) {
			validate(fields()[2], value);
			this.phone = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/**
		 * Checks whether the 'phone' field has been set.
		 * 
		 * @return True if the 'phone' field has been set, false otherwise.
		 */
		public boolean hasPhone() {
			return fieldSetFlags()[2];
		}

		/**
		 * Clears the value of the 'phone' field.
		 * 
		 * @return This builder.
		 */
		public angularJs.avroDemo.User.Builder clearPhone() {
			phone = null;
			fieldSetFlags()[2] = false;
			return this;
		}

		public User build() {
			try {
				User record = new User();
				record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
				record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
				record.phone = fieldSetFlags()[2] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[2]);
				return record;
			} catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(e);
			}
		}
	}

	private static final org.apache.avro.io.DatumWriter WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(
			SCHEMA$);

	@Override
	public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
		WRITER$.write(this, SpecificData.getEncoder(out));
	}

	private static final org.apache.avro.io.DatumReader READER$ = new org.apache.avro.specific.SpecificDatumReader(
			SCHEMA$);

	@Override
	public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
		READER$.read(this, SpecificData.getDecoder(in));
	}

}
